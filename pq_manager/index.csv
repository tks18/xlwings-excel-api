"name","category","tags","description","version","path"
"fx_LoadCsvDynamic","Table Loaders","[""csv"", ""dynamic"", ""import"", ""columns"", ""table""]","Load a CSV file with dynamic column handling and proper quote support.","v2.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_loaders\fx_LoadCSVDynamic.pq"
"fx_LoadExcelDynamic","Table Loaders","[""excel"", ""sheet"", ""table"", ""import"", ""dynamic"", ""flexible""]","Load a sheet or table from an Excel file, binary, or already-loaded workbook.","v1.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_loaders\fx_LoadExcelDynamic.pq"
"fx_LoadJSONDynamic","Table Loaders","[""json"", ""expand"", ""flatten"", ""file"", ""binary"", ""dynamic""]","Load a JSON file (from file path or binary), parse, and recursively expand all nested objects and arrays into a flat table. Allows custom delimiter for nested column names.","v1.1","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_loaders\fx_LoadJSONDynamic.pq"
"fx_LoadPDFDynamic","Table Loaders","[""pdf"", ""dynamic"", ""import"", ""columns"", ""table""]","Load all pages of a PDF file into a single flattened table by expanding a configurable number of dynamic columns otherwise 100 and removing empty ones.","v2.1","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_loaders\fx_LoadPDFDynamic.pq"
"fx_TableAddColsDynamic","Table Processing","[""table"", ""addcolumn"", ""dynamic"", ""record"", ""automation""]","Add multiple columns to a table dynamically based on a list of records defining name, type, and function.","v1.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_processing\fx_TableAddColsDynamic.pq"
"fx_TableArrangeByPattern","Table Processing","[""table"", ""arrange"", ""columns"", ""order"", ""pattern""]","Arrange columns in numerical order based on a specified prefix pattern (e.g., 'Col_1', 'Col_2', ...).","v1.1","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_processing\fx_TableArrangeSeq.pq"
"fx_TableKeepColumns","Table Processing","[""table"", ""select"", ""performance"", ""dynamic""]","Keep only the specified columns from a table.","v1.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_processing\fx_TableKeepColumns.pq"
"fx_TableRemoveDuplicateRows","Table Processing","[""table"", ""clean"", ""deduplicate"", ""performance""]","Remove duplicate rows based on all columns.","v1.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_processing\fx_TableRemoveDuplicateRows.pq"
"fx_TableRemoveNullCols","Table Processing","[""table"", ""clean"", ""nulls"", ""performance"", ""metadata""]","Remove columns that contain only null values.","v2.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_processing\fx_TableRemoveNullCols.pq"
"fx_TableRenameSequential","Table Processing","[""table"", ""rename"", ""columns"", ""sequential""]","Rename all columns sequentially as col_1, col_2, ... col_n.","v1.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_processing\fx_TableRenameCols.pq"
"fx_TableSlice","Table Processing","[""table"", ""slice"", ""dynamic"", ""performance""]","Slice a table from start to end row based on flexible search criteria (startCols/startValues/endCols/endValues), supports Exact/Contains and FirstFound/LastFound.","v2.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_processing\fx_TableSlice.pq"
"fx_TableUnpivotAuto","Table Processing","[""table"", ""unpivot"", ""reshape"", ""normalize"", ""autodetect""]","Unpivot selected data type columns automatically (defaults to numeric types).","v2.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\table_processing\fx_TableUnpivotAuto.pq"
"fx_TextSlugify","Text","[""text"", ""slug"", ""clean"", ""url"", ""normalize""]","Convert input text into a URL-friendly slug.","v1.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\text\fx_TextSluggify.pq"
"fx_TryOtherwise","Utility","[""error-handling"", ""safety"", ""try"", ""otherwise"", ""fallback""]","Safely executes a function with given input. Returns fallback value if an error occurs.","v1.0","C:\tools\projects\shan_xlwings_project\pq_manager\functions\utility\fx_TryOtherwise.pq"
